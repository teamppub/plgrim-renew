@charset "UTF-8";
@import '../common/variable';

//말줄임
@mixin text-hidden($line: 1, $lineHeight: 19, $auto: null) {
  /* autoprefixer: off */
  -webkit-box-orient: vertical;
  /* autoprefixer: on */
  display: -webkit-box;
  -webkit-line-clamp: $line;
  overflow: hidden;
  text-overflow: ellipsis;
  line-height: ($lineHeight * $line) / $line + px;
  //word-break: break-all;
  white-space: initial;
  @if $auto ==auto {
    //영역 자동
    max-height: $lineHeight * $line + px;
  } @else {
    //처음부터 영역잡히게
    height: $lineHeight * $line + px;
  }
}

@mixin text-hidden-one() {
  display: block;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

//svg icon : 컬러없는 아이콘 색변경 잦을때
@mixin svg($color: #fff, $value: null, $url: null) {
  @if $value ==null {
    -webkit-mask: url($url) no-repeat 50% 50%;
    mask: url($url) no-repeat 50% 50%;
  } @else {
    -webkit-mask: url(../images/icon/#{$value}.svg) no-repeat 50% 50%;
    mask: url(../images/icon/#{$value}.svg) no-repeat 50% 50%;
  }

  -webkit-mask-size: contain;
  mask-size: contain;
  background-color: $color;
}

// 노치 대응 기기 안전영역 환경변수 : safe-area
/*
 * safe-area-inset 처리
 * $key - 넣을곳(padding-top, marin-bottom, ...)
 * $direction - 방향(top, right, bottom, left)
 * $value - 더해질 값(생략가능)
 */
@mixin safe($key, $direction, $value: 0) {
  #{$key}: $value;

  @if ($value > 0) {
    #{$key}: calc(#{$value} + env(safe-area-inset-#{$direction}));
  } @else if ($value < 0) {
    #{$key}: calc((#{-$value} + env(safe-area-inset-#{$direction})) * -1);
  } @else {
    #{$key}: env(safe-area-inset-#{$direction});
  }
}

//정렬
@mixin abs($abs: c) {
  position: absolute;
  @if $abs == h {
    //horizontal 수평
    left: 50%;
    transform: translateX(-50%);
  } @else if $abs == v {
    //vertical 수직
    top: 50%;
    transform: translateY(-50%);
  } @else if $abs == c {
    //center 중앙
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

@mixin hidden {
  position: absolute;
  width: 0;
  height: 0;
  font-size: 0;
  line-height: 0;
  overflow: hidden;
  visibility: hidden;
}



//vw 계산법
//ex==> font-size: vw(20px);
// margin : vw( 20px 10px 30px 40px );

$viewport: 360px !default;
$vw-callback: false !default;
$vw-px-only: false !default;

@function vw-separator($list, $separator: false) {
	@if $separator == "comma" or $separator == "space" {
		@return append($list, null, $separator);
	} 
	
	@if function-exists("list-separator") == true {
		@return list-separator($list);
	}

	$test-list: ();
	@each $item in $list { 
		
		$test-list: append($test-list, $item, space); 
	}

	@return if($test-list == $list, space, comma); 
}
 
@function vw-convert($to, $values...) {
	
	$result: (); 
	$separator: vw-separator($values);

	@each $value in $values {
		@if type-of($value) == "number" and unit($value) == "vw" and $to == "px" {
			$result: append($result, ($value / ($viewport *2 )) * 100 * 1vw, $separator);
		} @else if type-of($value) == "number" and unit($value) == "px" and $to == "vw" {
			$result: append($result, ($value / ($viewport *2 )) * 100 * 2vw, $separator); // 2배수로 변경
		} @else if type-of($value) == "list" {
			$value-separator: vw-separator($value);
			$value: vw-convert($to, $value...);
			$value: vw-separator($value, $value-separator);
			$result: append($result, $value, $separator);
		} @else {
			$result: append($result, $value, $separator);  
		}
	}

	
	@return if(length($result) == 1, nth($result, 1), $result);
}

@function vw($values...) {
	@if $vw-px-only {
		@return vw-convert(px, $values...);
	} @else {
		@return vw-convert(vw, $values...); 
	}
}

@mixin vw($properties, $values...) { 
	@if type-of($properties) == "map" {
		@each $property in map-keys($properties) {
			@include vw($property, map-get($properties, $property));
		}
	} @else {
		@each $property in $properties {
			@if $vw-callback or $vw-px-only {
				#{$property}: vw-convert(px, $values...);
			}

			@if not $vw-px-only {
				#{$property}: vw-convert(vw, $values...);
			}
		}
	}
}
